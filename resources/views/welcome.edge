<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/themes/prism.min.css">

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;

        }

        body {
            width: 100%;
            height: 100vh;
            background-color: rgb(48, 48, 48);
        }

        .body {
            width: 100%;
            height: 100vh;
            overflow: auto;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            justify-content: stretch;
            background-color: rgba(48, 48, 48, 0.404);
            backdrop-filter: blur(8px);
            color: rgb(143, 143, 143);
        }

        .header-container {
            width: 100%;
            height: 60px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0rem 3rem;
            background-color: rgb(20, 20, 20);
            border-bottom: 1px solid rgba(223, 223, 127, 0.637);
        }

        .main-header-title {
            font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            color: rgb(166, 141, 206);
            font-size: 1.5rem;

        }

        .main-container {
            width: 80%;
            min-height: 85vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            height: max-content;
            max-height: 90vh;
            margin: auto;
            padding: 0.2rem 0 2rem 0;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.2);

        }
        .bg-stub__title {
            font-size: 10rem;
            rotate: -10deg;
            color: rgb(182, 182, 157);
            font-style: monospace;
        }

        .bg-stub {
            position: fixed;
            display: flex;
            align-items: center;
            justify-content: center;
            right: 0;
            left: 0;
            top: 0;
            bottom: 0;
            width: 100%;
            height: 100vh;
            background-color: rgba(0, 0, 0, 0);
            z-index: -1;
        }

        ::-webkit-scrollbar {
            width: 8px;
            /* ширина для вертикального скроллбара */
            height: 8px;
            /* высота для горизонтального скроллбара */
        }

        /* Ползунок внутри скроллбара */
        ::-webkit-scrollbar-thumb {
            background-color: #888888a8;
            /* цвет ползунка */
            border-radius: 6px;
            /* скругленные углы */
        }

        /* Ползунок при наведении */
        ::-webkit-scrollbar-thumb:hover {
            background-color: #555;
            /* цвет ползунка при наведении */
        }

        /* Трек (фон) скроллбара */
        ::-webkit-scrollbar-track {
            background: #f1f1f13b;
            /* цвет фона скроллбара */
            border-radius: 6px;
            /* скругленные углы */
        }

        /* Кнопки (если присутствуют) */
        ::-webkit-scrollbar-button {
            display: none;
            /* скрыть кнопки */
        }
    </style>
</head>

{{-- Основная страница --}}

<body id="body">
    <div class="body">
        <header class="header-container">
            <h1 class="main-header-title">Messanger API</h1>
        </header>

        <main class="main-container">

{{--=================================================  AUTH GROUP  =========================================================--}}
            @requestsBlock({ title: 'AUTH ENDPOINTS', colorFg: 'rgb(160, 62, 226)' })
                {{-- AUTH --}}
                @requestRow({
                    method: 'POST',
                    title: 'Login into system',
                    descr: 'Пользователь может выполнить авторизацию по эл. почте и паролю',
                    url: '/auth',
                    requiredAuth: false,
                    queries: [{ key: '-', type: '-', required: '-', default: '-' }],
                    pathParams: [ { key: '-', type: '-', required: '-', default: '-' } ],
                    requestExample: `
                        {
                            "email": string *,
                            "password": string *,
                        }
                    `,
                    responseExample: `
                    {
                        "data": {
                            "user": {
                                "id": number,
                                "name": string,
                                "lastname": string,
                                "surname": null | string,
                                "email": string,
                                "role": "user" | "admin",
                                "lastActivity": null | string,
                                "createdAt": string,
                                "updatedAt": string,
                                "deletedAt": null | string
                            },
                            "access_token": {
                                "type": "bearer",
                                "name": null | string,
                                "token": string,
                                "abilities": [
                                    "*"
                                ],
                                "lastUsedAt": null | string,
                                "expiresAt": string
                            }
                        }
                    }
                    `
                })
                @end
                {{-- AUTH CHECK --}}
                @requestRow({
                    method: 'GET',
                    title: 'Authentication test request',
                    descr: 'Тестовый запрос для проверки токена доступа',
                    url: '/auth/check',
                    requiredAuth: true,
                    queries: [{ key: '-', type: '-', required: '-', default: '-' }],
                    pathParams: [ { key: '-', type: '-', required: '-', default: '-' } ],
                    requestExample: undefined,
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/auth/check"
                            },
                            "data": boolean
                        }
                    `
                })
                @end
                {{-- LOGOUT --}}
                @requestRow({
                    method: 'DELETE',
                    title: 'Logout',
                    requiredAuth: true,
                    descr: `Запрос очищает авторизационную информацию пользователя и удаляет токен доступа. После такого запроса
                    пользователю необходимо будет выполнить аутентификацию снова`,
                    url: '/auth/logout',
                    queries: [{ key: '-', type: '-', required: '-', default: '-' }],
                    pathParams: [ { key: '-', type: '-', 'required': '-', default: '-' } ],
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/auth/logout"
                            },
                            "data": null
                        }
                    `
                })
                @end
            @end


{{--=================================================  PROFILE GROUP  =========================================================--}}
            @requestsBlock({ title: 'PROFILE ENDPOINTS', colorFg: 'rgb(228, 80, 118)' })
            
                {{-- CREATE PROFILE --}}
                @requestRow({
                    method: 'POST',
                    title: 'Create user profile',
                    descr: 'Запрос на создание пользовательского профиля',
                    url: '/profile/create',
                    requiredAuth: true,
                    queries: [{ key: '-', type: '-', required: '-', default: '-' }],
                    pathParams: [ { key: '-', type: '-', required: '-', default: '-' } ],
                    requestExample: `
                        {
                            "name": string *,
                            "lastname": string *,
                            "surname": string *,
                            "email": string *,
                            "gender": 0 | 1 | 2  ?,
                            "phoneNumber": string ?,
                            "login": string ?,
                            "avatar": $binary ?, 
                            "birthAt": string ?,
                        }
                    `,
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/profile/create"
                            },
                            "data": {
                                "id": number,
                                "userId": number,
                                "name": string,
                                "lastname": string,
                                "surname": string | null,
                                "email": string,
                                "phoneNumber": string | null,
                                "login": string | null,
                                "avatar": string | null,
                                "gender": number | null,
                                "birthAt": string | null,
                                "createdAt": string,
                                "updatedAt": string | null
                            }
                        }
                    `
                })
                @end

                {{-- PATCH PROFILE --}}
                @requestRow({
                    method: 'POST',
                    title: 'Create user profile',
                    descr: 'Запрос на создание пользовательского профиля',
                    url: '/profile/create',
                    requiredAuth: true,
                    queries: [{ key: '-', type: '-', required: '-', default: '-' }],
                    pathParams: [ { key: '-', type: '-', required: '-', default: '-' } ],
                    requestExample: `
                        {
                            "name": string *,
                            "lastname": string *,
                            "surname": string *,
                            "email": string *,
                            "gender": 0 | 1 | 2  ?,
                            "phoneNumber": string ?,
                            "login": string ?,
                            "avatar": $binary ?, 
                            "birthAt": string ?,
                        }
                    `,
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/profile/create"
                            },
                            "data": {
                                "id": number,
                                "userId": number,
                                "name": string,
                                "lastname": string,
                                "surname": string | null,
                                "email": string,
                                "phoneNumber": string | null,
                                "login": string | null,
                                "avatar": string | null,
                                "gender": number | null,
                                "birthAt": string | null,
                                "createdAt": string,
                                "updatedAt": string | null
                            }
                        }
                    `
                })
                @end
                
                {{-- GET MY PROFILE --}}
                @requestRow({
                    method: 'GET',
                    title: 'Get user profile',
                    requiredAuth: true,
                    descr: `Запрос на получение профиля пользоватля`,
                    url: '/profile/me',
                    queries: [{ key: '-', type: '-', required: '-', default: '-' }],
                    pathParams: [ { key: '-', type: '-', 'required': '-', default: '-' } ],
                    requestExample: undefined,
                    responseExample: undefined
                })
                @end
            @end


{{--=================================================  USERS GROUP  =========================================================--}}
            @requestsBlock({ title: 'USERS ENDPOINTS', colorFg: 'rgb(80, 204, 194)' })

                {{-- GET USERS --}}
                @requestRow({
                    method: 'GET',
                    title: 'Get all users in system',
                    requiredAuth: true,
                    descr: `
                        Запросить всех пользователей в системе
                        ** Примечание: пользователи чьё поле deletedAt НЕ РАВНО null, будут исключены из ответа
                        `,
                    url: '/users',
                    queries: [{ key: 'page', type: 'number', required: false, default: '-' },{ key: 'per_page', type: 'number', required: false, default: '-' },],
                    pathParams: [ { key: '-', type: '-', required: '-', default: '-' } ],
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/users/",
                                "paginator": null | [paginator Object]
                            },
                            "data": {
                                "users": [
                                    {
                                        "id": number,
                                        "name": string,
                                        "lastname": string,
                                        "surname": null | string,
                                        "lastActivity": null | string,
                                        "createdAt": string,
                                    }
                                ]
                            }
                        }
                    `
                })
                @end

                {{-- GET USER BY ID --}}
                @requestRow({
                    method: 'GET',
                    title: 'Get user BY id',
                    requiredAuth: true,
                    descr: `
                        Запросить пользователя по id
                        `,
                    url: '/users/:id',
                    queries: [{ key: '-', type: '-', required: '-', default: '-' }],
                    pathParams: [ { key: 'id', type: 'number', required: true, default: '-' } ],
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/users/:id"
                            },
                            "data": {
                                "id": number,
                                "name": string,
                                "lastname": string,
                                "surname": null | string,
                                "lastActivity": null | string,
                                "createdAt": string,
                                "deletedAt": null | string,
                            }
                        }
                    `
                })
                @end

                {{-- CREATE USER --}}
                @requestRow({
                    method: 'POST',
                    title: 'Creation user',
                    descr: `Запрос на создание пользователя`,
                    url: '/users/create',
                    requiredAuth: false,
                    queries: [{ key: '-', type: '-', required: '-', default: '-' }],
                    pathParams: [ { key: '-', type: '-', required: '-', default: '-' } ],
                    requestExample: `
                        {
                            "email": string *,
                            "password": string *,
                            "name": string *,
                            "lastname": string *
                        }
                    `,
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/users/create"
                            },
                            "data": {
                                "user": {

                                    "id": number,
                                    "name": string,
                                    "lastname": string,
                                    "surname": null | string,
                                    "lastActivity": null | string,
                                    "createdAt": string,
                                    "deletedAt": null | string,
                                },
                                "profile": {
                                    "id": number,
                                    "name": string,
                                    "lastname": string,
                                    "surname": string | null,
                                    "gender": 0 | 1 | 2 | null,
                                    "phoneNumber": string | null,
                                    "email": string,
                                    "login": string | null,
                                    "avatar": string | null,
                                    "birthAt": string | null,
                                    "userId": number,
                                    "createdAt": string,
                                    "updatedAt": string | null,
                                    "deletedAt": string | null
                                },
                                "access_token": {
                                    "type": "bearer",
                                    "name": string | null,
                                    "token": string,
                                    "abilities": ["*"],
                                    "lastUsedAt": string | null,
                                    "expiresAt": string
                                }
                            }
                        }
                    `
                })
                @end

                {{-- UPDATE USER --}}
                @requestRow({
                    method: 'PUT',
                    title: 'Update user',
                    descr: `Запрос на обновление данных пользователя`,
                    url: '/users/:user_id/update',
                    requiredAuth: true,
                    queries: [{ key: '-', type: '-', required: '-', default: '-' }],
                    pathParams: [ { key: 'user_id', type: 'number', required: true, default: '-' } ],
                    requestExample: `
                        {
                            "email": string ?,
                            "password": string ?,
                            "name": string ?,
                            "lastname": string ?,
                            "surname": string ?,
                        }
                    `,
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/users/:user_id/update"
                            },
                            "data": {
                                "user": {
                                    "id": number,
                                    "email": string,
                                    "name": string,
                                    "lastname": string,
                                    "surname": null | string,
                                    "role": "user" | "admin",
                                    "lastActivity": null | string,
                                    "createdAt": string,
                                    "updatedAt": null | string,
                                    "deletedAt": null | string
                                }
                            }
                        }
                    `
                })
                @end

                {{-- DELETE USER --}}
                @requestRow({
                    method: 'DELETE',
                    title: 'Delete user',
                    requiredAuth: true,
                    descr: `
                        Запрос на удаление пользователя. 
                        ** Примечание: после выполнения запроса, пользователь выполнивший запрос <Мягко> удаляется из системы **
                        `,
                    url: '/users/:user_id/delete',
                    queries: [{ key: '-', type: '-', required: '-', default: '-' }],
                    pathParams: [ { key: 'user_id', type: 'number', required: true, default: '-' } ],
                    requestExample: undefined,
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/users/:user_id/delete"
                            },
                            "data": null
                        }
                    `
                })
                @end
            @end

{{--=================================================  CHATS GROUP  =========================================================--}}
            @requestsBlock({ title: 'CHATS ENDPOINTS', colorFg: 'rgb(247, 166, 18)' })
                {{-- GET CHATS --}}
                @requestRow({
                    method: 'GET',
                    title: 'Get all chats for user',
                    requiredAuth: true,
                    descr: `
                        Запрос на получение всех чатов пользователя ** Примечание: 
                        * Чаты чьё поле deletedAt НЕ РАВНО null, будут исключены из ответа.
                        * Доступен объект пагинатора
                        `,
                    url: '/chats',
                    queries: [
                        { key: 'page', type: 'number', required: false, default: '-' }, 
                        { key: 'per_page', type: 'number', required: false, default: '-' }, 
                        { key: 'is_visible', type: 'boolean', required: false, default: '-' }, 
                    ],
                    pathParams: [ 
                        { key: '-', type: '-', required: '-', default: '-' }, 
                    ],
                    requestExample: undefined,
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/chats",
                                "paginator": null | [paginator Object]
                            },
                            "data": [
                                {
                                    "id": number,
                                    "creator": number,
                                    "createdAt": string,
                                    "users": [
                                        {
                                            "id": number,
                                            "name": string,
                                            "lastname": string,
                                            "surname": null | string,
                                            "lastActivity": null | string,
                                            "createdAt": string
                                        }
                                    ]
                                }
                            ]
                        }  
                    `
                })
                @end

                {{-- GET CHAT BY ID --}}
                @requestRow({
                    method: 'GET',
                    title: 'Get chat BY id',
                    requiredAuth: true,
                    descr: `
                        Запросить чат по id
                        `,
                    url: '/chats/:id',
                    queries: [
                        { key: '-', type: '-', required: '-', default: '-' }, 
                    ],
                    pathParams: [ 
                        { key: 'id', type: 'number', required: true, default: '-' }, 
                    ],
                    requestExample: undefined,
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/chats/:id/"
                            },
                            "data": {
                                "id": number,
                                "previewMessage": string | null,
                                "creator": number,
                                "visible": boolean,
                                "createdAt": string,
                                "updatedAt": string | null,
                                "deletedAt": string | null
                            }
                        }
                    `
                })
                @end

                {{-- CREATE CHAT --}}
                @requestRow({
                    method: 'POST',
                    title: 'Creation chat',
                    descr: `Запрос на создание чата`,
                    url: '/chats/create',
                    requiredAuth: true,
                    queries: [
                        { key: '-', type: '-', required: '-', default: '-' }, 
                    ],
                    pathParams: [ 
                        { key: '-', type: '-', required: '-', default: '-' }, 
                    ],
                    requestExample: `
                        {
                            "creator": number *,
                            "companion_id": number *,
                            "preview_message": string ?
                        }
                    `,
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/chats/create"
                            },
                            "data": {
                                "id": number,
                                "previewMessage": string | null,
                                "creator": number,
                                "visible": boolean,
                                "createdAt": string,
                                "updatedAt": string | null,
                                "deletedAt": string | null,
                                "users": [
                                    {
                                        "id": number,
                                        "name": string,
                                        "lastname": string,
                                        "surname": string | null,
                                        "lastActivity": string | null,
                                        "createdAt": string,
                                        "deletedAt": string | null,
                                    }
                                ]
                            }
                        }
                    `
                })
                @end

                {{-- UPDATE CHAT --}}
                @requestRow({
                    method: 'PUT',
                    title: 'Update chat',
                    descr: `Запрос на обновление данных чата`,
                    url: '/chats/:id/update',
                    requiredAuth: true,
                    queries: [
                        { key: '-', type: '-', required: '-', default: '-' }, 
                    ],
                    pathParams: [ 
                        { key: 'id', type: 'number', required: true, default: '-' }, 
                    ],
                    requestExample: `
                        {
                            "preview_message": string ?,
                            "visible": boolean ?,
                        }
                    `,
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/chats/:id/update"
                            },
                            "data": {
                                "id": 9,
                                "previewMessage": string | null,
                                "creator": number,
                                "visible": boolean,
                                "createdAt": string,
                                "updatedAt": string | null,
                                "deletedAt": null
                            }
                        }
                    `
                })
                @end

                {{-- DELETE CHAT --}}
                @requestRow({
                    method: 'DELETE',
                    title: 'Delete chat',
                    requiredAuth: true,
                    requiredAuth: true,
                    descr: `
                        Запрос на удаление чата. 
                        ** Примечание: после выполнения запроса, чат <Мягко> удаляется из системы **
                        `,
                    url: '/chats/:id/delete',
                    queries: [
                        { key: '-', type: '-', required: '-', default: '-' }, 
                    ],
                    pathParams: [ 
                        { key: 'id', type: 'number', required: true, default: '-' }, 
                    ],
                    requestExample: undefined,
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/chats/:id/delete"
                            },
                            "data": { 
                                deletedAt: string 
                            }
                        }
                    `
                })
                @end
            @end

{{--=================================================  MESSAGES GROUP  =========================================================--}}
            @requestsBlock({ title: 'MESSAGES ENDPOINTS', colorFg: 'rgb(238, 88, 51)' })
                {{-- GET MESSAGES --}}
                @requestRow({
                    method: 'GET',
                    title: 'Get all messages of chat',
                    requiredAuth: true,
                    descr: `
                        Запрос на получение сообщений в чате ** Примечание:
                        * сообщений чьё поле deletedAt НЕ РАВНО null, будут исключены из ответа.
                        * если сообщение содержит вложенные удаленные сообщение, то они будут проходить в ответ 
                        * Для этого запроса доступен объект пагинатора
                    `,
                    url: '/messages/chat/:chat_id',
                    queries: [{ key: '-', type: '-', required: '-', default: '-' }],
                    pathParams: [{ key: 'chat_id', type: 'number', required: true, default: '-' }],
                    requestExample: undefined,
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/messages/chat/:chat_id",
                                "paginator": null | [paginator Object]
                            },
                            "data": {
                                "messages": [
                                    {
                                        "id": number,
                                        "fromUserId": number,
                                        "toUserId": number,
                                        "chatId": number,
                                        "content": string,
                                        "isForwarding": boolean,
                                        "forwardedMessages": null | [],
                                        "createdAt": string,
                                        "updatedAt": string | null,
                                        "deletedAt": string | null,
                                    }
                                ]
                            }
                        }
                    `

                })
                @end

                {{-- GET MESSAGE BY ID --}}
                @requestRow({
                    method: 'GET',
                    title: 'Get message BY id',
                    requiredAuth: true,
                    descr: `
                        Запросить сообщение по id
                    `,
                    url: 'messages/message/:id',
                    queries: [{ key: '-', type: '-', required: '-', default: '-' }],
                    pathParams: [{ key: 'id', type: 'number', required: true, default: '-' }],
                    requestExample: undefined,
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/messages/message/:id"
                            },
                            "data": {
                                "id": number,
                                "fromUserId": number,
                                "toUserId": number,
                                "chatId": number,
                                "content": string,
                                "isForwarding": boolean,
                                "forwardedMessages": null | [],
                                "createdAt": string,
                                "updatedAt": string | null,
                                "deletedAt": string | null,
                            }
                        }
                    `
                })
                @end

                {{-- CREATE MESSAGE --}}
                @requestRow({
                    method: 'POST',
                    title: 'Creation message',
                    descr: `Запрос на создание сообщения`,
                    requiredAuth: true,
                    url: 'messages/create',
                    queries: [{ key: 'forwarding', type: 'boolean', required: false, default: '-' }],
                    pathParams: [{ key: '-', type: '-', required: '-', default: '-' }],
                    requestExample: `
                        {
                            from_user_id: number *,
                            to_user_id: number *,
                            chat_id: number *,
                            content: string *,
                            forwarded_ids: number[] ?,
                        }
                    `,
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/messages/create"
                            },
                            "data": {
                                "id": number,
                                "content": string,
                                "chatId": number,
                                "toUserId": number,
                                "fromUserId": number,
                                "chat": {
                                    "id": number,
                                    "previewMessage": string | null,
                                    "creator": number,
                                    "visible": boolean,
                                    "createdAt": string,
                                    "updatedAt": string | null,
                                    "deletedAt": string | null
                                },
                                "isForwarding": boolean,
                                "forwardedMessages": null | []
                                "createdAt": string,
                                "updatedAt": string | null,
                            }
                        }
                    `
                })
                @end

                {{-- UPDATE MESSAGE --}}
                @requestRow({
                    method: 'PUT',
                    title: 'Edit message',
                    descr: `Запрос на редактирование сообщения`,
                    requiredAuth: true,
                    url: 'messages/:id/update',
                    queries: [{ key: '-', type: '-', required: '-', default: '-' }],
                    pathParams: [{ key: 'id', type: 'number', required: true, default: '-' }],
                    requestExample: `
                        {
                            content: string *,
                        }
                    `,
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/messages/:id/update"
                            },
                            "data": {
                                "id": number,
                                "content": string,
                                "chatId": number,
                                "toUserId": number,
                                "fromUserId": number,
                                "chat": {
                                    "id": number,
                                    "previewMessage": string | null,
                                    "creator": number,
                                    "visible": boolean,
                                    "createdAt": string,
                                    "updatedAt": string | null,
                                    "deletedAt": string | null
                                },
                                "isForwarding": boolean,
                                "forwardedMessages": null | []
                                "createdAt": string,
                                "updatedAt": string | null,
                                "deletedAt": string | null
                            }
                        }
                    `
                })
                @end

                {{-- DELETE MESSAGE --}}
                @requestRow({
                    method: 'DELETE',
                    title: 'Delete message',
                    requiredAuth: true,
                    descr: `
                    Запрос на удаление сообщение.
                    ** Примечание: сообщение удаляется из системы <Мягко> **
                        `,
                    url: 'messages/:id/delete',
                    queries: [{ key: '-', type: '-', required: '-', default: '-' }],
                    pathParams: [{ key: 'id', type: 'number', required: true, default: '-' }],
                    requestExample: undefined,
                    responseExample: `
                        {
                            "meta": {
                                "status": "success",
                                "code": 200,
                                "url": "/messages/:id/delete"
                            },
                            "data": null
                        }
                    `
                })
                @end
            @end
        </main>
    </div>
    <div class="bg-stub">
        <h1 class="bg-stub__title">Messanger API</h1>
    </div>
</body>

<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/prism.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        Prism.highlightAll();

        let opennedMenuIds = [];
        let basicDuration = 0.4;

        {{-- Выполнить анимацию раворачивания info menu --}}
        function expandInfoMenu(menu) {
            let duration = 0.15;
            let queriesBlock;
            let pathesBlock;
            let responseBlock;
            let requestTitle;
            let responseTitle;
            queriesBlock = menu.childNodes[4];
            pathesBlock = menu.childNodes[10];
            requestBody = menu.childNodes[18];
            responseBlock = menu.childNodes[26];
            requestTitle = menu.childNodes[1];
            responseTitle = menu.childNodes[22];

            // Свернуть инфо блок
            if(opennedMenuIds.includes(menu.id)) {
                opennedMenuIds = opennedMenuIds.filter(id => menu.id != id);
                return gsap.to(menu, { duration: 0.3, height: '0px', padding: '0', zIndex: '-1'  });
            }
            opennedMenuIds.push(menu.id);
            const tl = gsap.timeline();
            tl.to(menu, { duration: 0.3, height: 'max-content', padding: '1rem', zIndex:'12' })
            tl.to(queriesBlock, { duration, left: '0' })
            tl.to(pathesBlock, { duration, left: '0' })
            tl.to(requestBody, { duration, left: '0' })
            tl.to(responseBlock, { duration, left: '0' })
            tl.to(requestTitle, { duration, right: '0' })
            tl.to(responseTitle, { duration, left: '0' })
        }

        {{-- Найти DOM кнопки расширения инфо меню  --}}
        function findExpandBtn(event) {
            return event.target.childNodes[7].childNodes[3];
        }
        function findHiddenBtn(event) {
            return event.target.childNodes
        }

        {{-- Найти DOM информационного блока на который произошел клик --}}
        function findInfoMenu(event) {
            let targetEl = event.target.parentElement;
            let btnExpand = event.target;
            if(targetEl.classList && targetEl.classList.value.split(' ').includes('btn-expand')) {
                targetEl = targetEl.parentElement;
            }
            let infoMenu;
            targetEl.parentElement.parentElement.childNodes.forEach((node) => {
                if(node.classList && node.classList.value.split(' ').includes('request-info-menu')) {
                    return infoMenu = node;
                }
            });
            if(infoMenu) {
                return expandInfoMenu(infoMenu, btnExpand);
            } else throw 'Ошибка при получении DOM элемента информационного меню'
        }
        const requestRows = document.querySelectorAll('.request-row-header');
        let btnsExpand = document.querySelectorAll('.btn-expand'); 
        btnsExpand.forEach((btnExpand) => {
            btnExpand.addEventListener('click', findInfoMenu);
            let chevronIcon = btnExpand.childNodes[1]
            btnExpand.addEventListener('mouseenter', () => {
                gsap.to(chevronIcon, { duration: basicDuration, rotate: '360deg' })
            });
            btnExpand.addEventListener('mouseleave', (event) => {
                gsap.to(chevronIcon, { duration: basicDuration, rotate: '-360deg' })
            });
        });

        let btnsHidden = document.querySelectorAll('.btn-hidden');
        btnsHidden.forEach((btnHidden) => {
            btnHidden.addEventListener('click', (event) => {
                const infoMenu = event.target.parentElement;
                expandInfoMenu(infoMenu);
            });
            let chevronIcon = btnHidden.childNodes[1]
            btnHidden.addEventListener('mouseenter', () => {
                gsap.to(chevronIcon, { duration: basicDuration, rotate: '360deg' })
            })
            btnHidden.addEventListener('mouseleave', (event) => {
                gsap.to(chevronIcon, { duration: basicDuration, rotate: '-360deg' })
            })
        });

        {{-- Обработка MouseEnter на строки запросов --}}
        requestRows.forEach((row) => {
            row.addEventListener('mouseenter', (event) => {
                const rowContainerMenu = row.parentElement.childNodes[3];
                const btnExpand = findExpandBtn(event);
                if(!opennedMenuIds.includes(rowContainerMenu.id)) {
                    gsap.to(btnExpand, { duration: basicDuration, right: '0' });
                }
            });
            row.addEventListener('mouseleave', (event) => {
                const btnExpand = findExpandBtn(event);
                gsap.to(btnExpand, { duration: basicDuration, right: '-150px' });
            });
        });
    })
</script>

</html>